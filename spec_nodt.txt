＜入力ファイル仕様＞
例：ファイル名 sample00.stg

          8# 総タスク数（ダミータスク除く）
          0          0          0
          1          1          1          0
          2          3          1          0
          3          3          1          1
          4          2          1          1
          5          6          2          3          4
          6          7          2          3          4
          7          4          2          5          6
          8          5          1          2
          9          0          2          7          8


入力ファイル1行目は総タスク数を示す。
2行目以降は、個々のタスクについて以下の情報を示している。
1列目：タスク番号
2列目：タスクコスト
3列目：先行タスク数
4列目以降：先行タスク番号


注意事項：
・タスク番号は、0 〜 という入力〜出力と順序よく並んでいるとは限らない


＜プログラム仕様＞
入力仕様：
input_data()で入力されたタスクグラフは
support.h で定義された構造体 _task の配列に格納される。
構造体 _task は、以下のようになっている。
struct _task
{
    int no;          /*タスク番号*/ 
    int cost;        /*タスクコスト*/
    int total_pre;   /*先行タスク数*/
    int *pre;        /*先行タスク番号*/
} *task;

sample.stgをinput_data()で読み込んだときの配列 task の結果を示す。
**  task構造体の例 (入力データ： sample00.stg) **

	task[0].no = 0;
	task[0].cost = 0;
	task[0].total_pre = 0;
	task[0].pre = NULL;

	task[1].no = 1;
	task[1].cost = 1;
	task[1].total_pre = 1;
	task[1].pre[0] = 0;

	task[2].no = 2;
	task[2].cost = 3;
	task[2].total_pre = 1;
	task[2].pre[0] = 1;

  	task[3].no = 3;
	task[3].cost = 3;
	task[3].total_pre = 1;
	task[3].pre[0] = 1;

  	task[4].no = 4;
	task[4].cost = 2;
	task[4].total_pre = 1;
	task[4].pre[0] = 1;

  	task[5].no = 5;
	task[5].cost = 6;
	task[5].total_pre = 2;
	task[5].pre[0] = 3;
	task[5].pre[1] = 4;

  	task[6].no = 6;
	task[6].cost = 7;
	task[6].total_pre = 2;
	task[6].pre[0] = 3;
	task[6].pre[1] = 4;

  	task[7].no = 7;
	task[7].cost = 4;
	task[7].total_pre = 2;
	task[7].pre[0] = 5;
	task[7].pre[1] = 6;

  	task[8].no = 8;
	task[8].cost = 5;
	task[8].total_pre = 1;
	task[8].pre[0] = 2;

  	task[9].no = 9;
	task[9].cost = 0;
	task[9].total_pre = 2;
	task[9].pre[0] = 7;
	task[9].pre[1] = 8;


このように入力されているので、後は必要に応じて、
これらの値を参照しスケジューラを作成する。


＜出力ファイル仕様＞
出力にはsupport.cで定義されたグローバル変数total_cost
およびsupport.hで定義された構造体 _pe を用いる

struct _pe
{
    int *task_no;
    int *task_cost;
} *pe;

total_cost
 最後に実行を終えた時間

構造体peについて:
task_noは割り当てられたタスクの番号
task_costは割り当てられたタスクのコストを格納する。

構造体peは総タスク数（total_pe）分だけ用意されている。
peの添字は何番目のプロセッサかを表し、
task_no、task_costの添字はプロセッサに何番目に割り当てられた仕事かを意味する。

PE1に 1番目ににタスク番号2番、2番目にタスク番号4番を割り当てる場合は、、

	pe[1].task[0] = 2;
	pe[1].cost[0] = 3;

	pe[1].task[1] = 4;
	pe[1].cost[1] = 2;

このように表現する。

また、PE0のタスク番号3のあとでは仕事を割り当てていないが、
(このようなプロセッサが仕事をしていない状態をIdleと言います)
このときは、タスク番号を "-1" とする。
また、costにはIdleでいる時間を入れる。

PE0に1番目にタスク3番が割り当て、その後、1単位時間Idleになる場合は

	pe[1].task[0] = 3;
	pe[1].cost[0] = 3;

	pe[1].task[1] = -1;
	pe[1].cost[1] = 1;

このように表現する。

注意：
・入口ノード、出口ノード(sampleでは、タスク番号0および9)は
  ダミータスクのため出力変数outに表現しないこと


参考までにsample00.stgの出力結果sample00.gnt のときの out の結果を示す。
**  out 構造体の例 (出力データ： sample00.gnt) **

	total_cost = 16;

	pe[0].task[0] = 1;
	pe[0].cost[0] = 1;

	pe[0].task[1] = 3;
	pe[0].cost[1] = 3;

	pe[0].task[2] = -1;
	pe[0].cost[2] = 1;

	pe[0].task[3] = 6;
	pe[0].cost[3] = 7;

	pe[0].task[4] = 7;
	pe[0].cost[4] = 4;

	pe[1].task[0] = 2;
	pe[1].cost[0] = 3;

	pe[1].task[1] = 4;
	pe[1].cost[1] = 2;

	pe[1].task[2] = 5;
	pe[1].cost[2] = 6;

	pe[1].task[3] = 8;
	pe[1].cost[3] = 5;

＜出力ファイル＞
構造体 out に値が格納された値が、
関数 output によってファイルに出力される。

出力ファイル名は*.gntと入力する。
出力ファイルの例を以下に示す。

2              #pe数
1              #データ転送なし目印
PE 1
PE 2
16             #total_cost
      1      1 #pe[0].task[0]、pe[0].cost[0]
      3      3 #pe[0].task[1]、pe[0].cost[1]
      0      1 #IDLEは0で出力される
      6      7
      7      4
      2      3 #pe[0].task[1]、pe[0].cost[1]
      4      2
      5      6
      8      5
"16"           #total_cost（grepで検索するときに使う）


